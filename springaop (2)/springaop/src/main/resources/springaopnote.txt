                 ##################################SPRING AOP #######################

                 Aop - Aspect orientated programming
                 cross-cutting concern - Move Additional Service in our project to move in another class
                 and bind when and where it required

                 Aspect    : Aspect is class the provide additional service.
                               like Transaction Management,logging, Security
                 Advice    :    which method available in Aspect It'called Advice.

                 Type of Advice(5)
                  1) before advice          : Executing advice befor business method
                  2) After advice           : Executing advice After business method finished
                  3) Around advice          : Advice code made in two part
                  4) After Returning advice : after Executing business method , once sucess advice Executing
                  5) After throwing advice


                 PointCut  :  It is expression.It will select the business method which need advices.
                             It can not specify what advices
                 JoinPoint : Linking process like Link the business method to advices It is called joint point

                 Target  : Pure Business class object code

                 weveing  : It is the process of mixing the Business class method and it needed advices

                 proxy   :  Final output of class/object

                 This is use for cross cutting concern
                 For Example we have ticket Booking application
                 we have some function like 1) cal discount 2) Total amount this are the business logic
                 Additional service(Logic)
                 2)Logging(use for the what is happened on production )
                 3)Security concept

                 There are we create two class one is business class and other class is Aspect class
                 In Business class we write our actual logic and in aspect class we write Additional service in methhod like
                 This logic we write In aspect class In method this method called Advice
                 Transaction Management ,logging and Security
                 1)Transaction Management

                 ######################################
                 here new classes will be generated by using JDK Dynamic proxy concept
                 This classes called proxy classes It contains the business class method + advices
                 After creating proxy class one object is created for this proxy class it is called proxy object.
                 ---------------------------------------------------------------------------------------------
                 for above thing do we have to vendor's
                 Spring aop xml based configuration.[legacy style]
                 Spring aop using  aspectj[new Style it is completely Annotation based]

                 for that we have to add dependency spring boot starter- aop
          -------------     ---- ------------------------------------------------------------------
    Annotations
    - @Aspect
    - @Before
    - @After
    - @AfterReturning
    - @AfterThrowing
    - @pointcut

    In beforeAdvice
        Excution order -
                      adviceMethod   1 st
                      businessMethod  2nd st
    In AfterAdvice
        Execution order - Execution advice after businessMethod
                        b.method first
                        advice method 2nd st

   In Around Advice - Execution Order
                    advice method -- 1st part1
                    b.method
                    advice method   2nd part
   After returning Advice : After executive b.method , only on success execute advice
   execution order : b.method()
                     (If b.method successfully , no any exception )
                     then excute advice
  Aftar throwing Advice : After executing businessMethod if b.method

                         throwing any exception
----------------------------------------------------------------------
what is the difference between After,After Returning, after throwing advice
@After - It will be executing after business method. no matter it will be
sucess or throwing any exception

After advice returning  advice is executed only on successful execution
of business method

After Throwing  returning  advice is executed If business method is failure
--------------------------------------------------------------------------
                     point cut
---------------------------------------------------------------------
point cut is expression, It will select business class methods  which need
advices.
pointcut  can never Specify which advice going to be connected

Point cut Syntax  Specifier return type Package.classname.method name(Parameter type)
Note  : allowed Symbols in pointcut expression : *(star),.(dot)
-----------------------------Example--------------------------------
#1) public in.rushi.dao.EmployeeDao.saveEmployee(Employee)

   saveEmployee() method having parameter Employee with return type int
   of type public defined iin class EmployeeDao is selected for connected with advice

#2) public int in.rushi.dao.EmployeeDao.*();
    => Zero parameter only (No parameter)
       * meaning is any method

#3) public * in.it.rushi.dao.EmployeeDao(..)
    => Zero or more parameter (Of any type)

#4)public * in.rushi.*.*(..);
      any pa


